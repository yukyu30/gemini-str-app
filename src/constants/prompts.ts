// SRT字幕専用プロンプト
export const SRT_PROMPT = (durationMs?: number, maxCharsPerSubtitle: number = 20, enableSpeakerDetection: boolean = true) => {
  const durationText = durationMs ? `${Math.floor(durationMs / 60000)}分${Math.floor((durationMs % 60000) / 1000)}秒 (${durationMs}ms)` : undefined;
  return `提供する音声（または動画）ファイルの内容を、高品質なSRT（SubRip Text）ファイル形式で文字起こししてください。${durationText ? `\n\n**音声ファイルの長さ: ${durationText}**\n音声の長さを考慮して、適切な字幕の分割と表示タイミングを決定してください。` : ''}

# 1. SRTファイルの基本構造について

まず、納品していただくSRTファイルの構造について共通認識を持つために、基本的なルールを説明します。SRTファイルは、以下の4つの要素が1セットとなって構成されるテキストファイルです。

1.  **通し番号:** \`1\`から始まる字幕の連番です。
2.  **タイムスタンプ:** \`時:分:秒,ミリ秒 --> 時:分:秒,ミリ秒\` の形式で、字幕の表示開始時間と終了時間を指定します。（例: \`00:01:23,456 --> 00:01:28,912\`）
3.  **字幕テキスト:** 画面に表示する文章です。改行を含めず、インラインで記述してください
4.  **空行:** 各字幕ブロックを区切るための、何も書かれていない行です。必ず必要です

**【具体例】**
1
00:00:05,520 --> 00:00:08,910
これは1番目の字幕の
テキストです。

2
00:00:09,150 --> 00:00:11,300
そして、これが2番目の字幕です。

この構造を厳密に守ってファイルを作成してください。.srtファイルとして納品してください

# 2. 文字起こしの詳細なルール

上記の基本構造を踏まえ、以下の詳細なルールに従って作業を進めてください。

1.  **タイムスタンプの精度**
    - \`hh:mm:ss,ms\` の形式を厳守し、ミリ秒は3桁で記述してください。
    - 音声の発話タイミングと字幕の表示タイミングを正確に一致させてください。

2.  **字幕テキストの編集ルール**
    - **文字数制限:** 1つの字幕ブロック（通し番号1つにつき）のテキストは、**${maxCharsPerSubtitle}文字以内**を目安にしてください。長くなる場合は、意味の区切りが良い箇所で改行するなど、読みやすさを最優先してください。
    - **フィラーワードの削除:** 会話中の「えーっと」「あのー」「なんか」といった、意味を持たないフィラーワードはすべて削除し、自然で聞き取りやすい文章にしてください。${enableSpeakerDetection ? '\n    - **話者の区別:** 会話に複数の話者がいる場合は、各字幕の先頭に話者名を明記してください。（例: `アオイ: `、`ユーザー: `）' : '\n    - **話者の区別:** 話者名は付けず、純粋な発話内容のみを記録してください。'}

3.  **品質要求**
    - 字幕として読みやすく、視聴者にとって理解しやすい文章にしてください。
    - 音声が不明瞭な部分は [不明瞭] として記録してください。
    - 無音部分や間は適切に反映し、字幕の切り替えタイミングを自然にしてください。

**最終的にSRT形式のテキストのみを出力してください。説明や前置きは不要です。**`;
};

export const SUPPORTED_AUDIO_FORMATS = [
  'audio/wav',
  'audio/x-wav',
  'audio/mp3', 
  'audio/aiff',
  'audio/aac',
  'audio/ogg',
  'audio/flac'
] as const;

// 1段階目: 基本文字起こし用プロンプト（Gemini 2.0 Flash）
export const INITIAL_TRANSCRIPTION_PROMPT = () => `音声ファイルの内容を文字起こししてください。

# 目的
この文字起こしは、会話のトピック分析と専門用語辞書作成のために使用します。

# 要求事項
1. **話者の発言を正確に文字起こし**
2. **フィラーワード（えーっと、あのー等）も含めて全て記録**
3. **専門用語や固有名詞は正確に記録**
4. **会話の流れや文脈がわかるように**

# 出力形式
- プレーンテキストで出力
- 話者が複数いる場合は「話者1:」「話者2:」等で区別
- タイムスタンプは不要
- 改行で発言を区切る

**説明や前置きは不要です。文字起こしテキストのみを出力してください。**`;

// 2段階目: トピック分析用プロンプト（Gemini 2.0 Flash）
export const TOPIC_ANALYSIS_PROMPT = (transcription: string) => `以下の文字起こしテキストを分析して、会話の主なトピックを特定してください。

# 文字起こしテキスト
${transcription}

# 要求事項
1. **会話の主要テーマを1-3個特定**
2. **専門分野（IT、医療、法律、ビジネス、学術等）があれば特定**
3. **頻出する専門用語や固有名詞をリストアップ**

# 出力形式
メイントピック: [トピック名]
専門分野: [分野名]
キーワード: [重要な用語をカンマ区切り]

**簡潔に出力してください。**`;

// 3段階目: 辞書作成用プロンプト（Gemini 2.5 Pro Preview）
export const DICTIONARY_CREATION_PROMPT = (topic: string) => `${topic}に出てくる用語の辞書を構築して。
表記、ふりがなのみをセットでcsv形式で記載してください。topic自体に誤字脱字がないか確認してから、辞書を作成してください。
日本語話者がわかるような辞書にして
**最終的にCSVのみを出力してください。説明や前置きは不要です。**`;

// 4段階目: 最終SRT生成用プロンプト（辞書付き）
export const FINAL_SRT_PROMPT = (durationMs?: number, maxCharsPerSubtitle: number = 20, enableSpeakerDetection: boolean = true, dictionary?: string) => {
  const durationText = durationMs ? `${Math.floor(durationMs / 60000)}分${Math.floor((durationMs % 60000) / 1000)}秒 (${durationMs}ms)` : undefined;
  return `提供する音声（または動画）ファイルの内容を、高品質なSRT（SubRip Text）ファイル形式で文字起こししてください。${durationText ? `\n\n**音声ファイルの長さ: ${durationText}**\n音声の長さを考慮して、適切な字幕の分割と表示タイミングを決定してください。` : ''}

${dictionary ? `\n# 専門用語辞書\n以下の辞書を参考に、専門用語の表記を統一してください：\n\n${dictionary}\n` : ''}

# 1. SRTファイルの基本構造について

まず、納品していただくSRTファイルの構造について共通認識を持つために、基本的なルールを説明します。SRTファイルは、以下の4つの要素が1セットとなって構成されるテキストファイルです。

1.  **通し番号:** \`1\`から始まる字幕の連番です。
2.  **タイムスタンプ:** \`時:分:秒,ミリ秒 --> 時:分:秒,ミリ秒\` の形式で、字幕の表示開始時間と終了時間を指定します。（例: \`00:01:23,456 --> 00:01:28,912\`）
3.  **字幕テキスト:** 画面に表示する文章です。改行を含めず、インラインで記述してください
4.  **空行:** 各字幕ブロックを区切るための、何も書かれていない行です。必ず必要です

**【具体例】**
1
00:00:05,520 --> 00:00:08,910
これは1番目の字幕の
テキストです。

2
00:00:09,150 --> 00:00:11,300
そして、これが2番目の字幕です。

この構造を厳密に守ってファイルを作成してください。.srtファイルとして納品してください

# 2. 文字起こしの詳細なルール

上記の基本構造を踏まえ、以下の詳細なルールに従って作業を進めてください。

1.  **タイムスタンプの精度**
    - \`hh:mm:ss,ms\` の形式を厳守し、ミリ秒は3桁で記述してください。
    - 音声の発話タイミングと字幕の表示タイミングを正確に一致させてください。

2.  **字幕テキストの編集ルール**
    - **文字数制限:** 1つの字幕ブロック（通し番号1つにつき）のテキストは、**${maxCharsPerSubtitle}文字以内**を目安にしてください。長くなる場合は、意味の区切りが良い箇所で改行するなど、読みやすさを最優先してください。
    - **フィラーワードの削除:** 会話中の「えーっと」「あのー」「なんか」といった、意味を持たないフィラーワードはすべて削除し、自然で聞き取りやすい文章にしてください。${enableSpeakerDetection ? '\n    - **話者の区別:** 会話に複数の話者がいる場合は、各字幕の先頭に話者名を明記してください。（例: `アオイ: `、`ユーザー: `）' : '\n    - **話者の区別:** 話者名は付けず、純粋な発話内容のみを記録してください。'}

3.  **品質要求**
    - 字幕として読みやすく、視聴者にとって理解しやすい文章にしてください。
    - 音声が不明瞭な部分は [不明瞭] として記録してください。
    - 無音部分や間は適切に反映し、字幕の切り替えタイミングを自然にしてください。

**最終的にSRT形式のテキストのみを出力してください。説明や前置きは不要です。**`;
};

export const GEMINI_MODELS = [
  {
    id: 'gemini-2.0-flash',
    name: 'Gemini 2.0 Flash',
    description: '高速で費用効率的'
  },
  {
    id: 'gemini-2.5-pro-preview-06-05',
    name: 'Gemini 2.5 Pro Preview',
    description: '最新のプレビューモデル'
  }
] as const;

export const API_LIMITS = {
  MAX_FILE_SIZE_MB: 1024, // 1GB for Files API
  MAX_INLINE_SIZE_MB: 20,  // 20MB for inline data
  MAX_AUDIO_DURATION_HOURS: 9.5,
  TOKENS_PER_SECOND: 32
} as const;
